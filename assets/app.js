angular
	.module('app', []);
(function(){
    angular
        .module('app')
        .controller('testController', testController);

        function testController() {
            var vm = this;
            
            vm.thousand = 1000;
            vm.tenthousand = 10000;
            vm.hundredthousand = 100000;
            vm.thousandtwentyfive = 1250;
            vm.tenthousandtwentyfive = 12500;
            vm.hundredthousandtwentyfive = 125000;
            vm.thousandfive = 1500;
            vm.tenthousandfive = 15000;
            vm.hundredthousandfive = 150000;
            vm.thousandsevenfive = 1750;
            vm.tenthousandsevenfive = 17500;
            vm.hundredthousandsevenfive = 175000;
            vm.thousandeight = 1800;
            vm.tenthousandeight = 18000;
            vm.hundredthousandeight = 180000;
            vm.thousandnine = 9999;
            vm.tenthousandnine = 99999;
            vm.hundredthousandnine = 999999;

            vm.million = 1000000;
            vm.tenmillion = 10000000;
            vm.hundredmillion = 100000000;
            vm.milliontwentyfive = 1250000;
            vm.tenmilliontwentyfive = 12500000;
            vm.hundredmilliontwentyfive = 125000000;
            vm.millionfive = 1500000;
            vm.tenmillionfive = 15000000;
            vm.hundredmillionfive = 150000000;
            vm.millionsevenfive = 1750000;
            vm.tenmillionsevenfive = 17500000;
            vm.hundredmillionsevenfive = 175000000;
            vm.millioneight = 1800000;
            vm.tenmillioneight = 18000000;
            vm.hundredmillioneight = 180000000;
            vm.millionnine = 9999000;
            vm.tenmillionnine = 99999999;
            vm.hundredmillionnine = 999999999;

            vm.billion = 1000000000;
            vm.tenbillion = 10000000000;
            vm.hundredbillion = 100000000000;
            vm.billiontwentyfive = 1250000000;
            vm.tenbilliontwentyfive = 12500000000;
            vm.hundredbilliontwentyfive = 125000000000;
            vm.billionfive = 1500000000;
            vm.tenbillionfive = 15000000000;
            vm.hundredbillionfive = 150000000000;
            vm.billionsevenfive = 1750000000;
            vm.tenbillionsevenfive = 17500000000;
            vm.hundredbillionsevenfive = 175000000000;
            vm.billioneight = 1800000000;
            vm.tenbillioneight = 18000000000;
            vm.hundredbillioneight = 180000000000;
            vm.billionnine = 9999000000;
            vm.tenbillionnine = 99999999000;
            vm.hundredbillionnine = 999999999000;

            vm.trillion = 1000000000000;
            vm.tentrillion = 10000000000000;
            vm.hundredtrillion = 100000000000000;
            vm.trilliontwentyfive = 1250000000000;
            vm.tentrilliontwentyfive = 12500000000000;
            vm.hundredtrilliontwentyfive = 125000000000000;
            vm.trillionfive = 1500000000000;
            vm.tentrillionfive = 15000000000000;
            vm.hundredtrillionfive = 150000000000000;
            vm.trillionsevenfive = 1750000000000;
            vm.tentrillionsevenfive = 17500000000000;
            vm.hundredtrillionsevenfive = 175000000000000;
            vm.trillioneight = 1800000000000;
            vm.tentrillioneight = 18000000000000;
            vm.hundredtrillioneight = 180000000000000;
            vm.trillionnine = 9999999000000;
            vm.tentrillionnine = 99999999999000;
            vm.hundredtrillionnine = 999999999999000;
        }
}());
angular
  .module('app')
  .filter('numberAbbrev', numberAbbrev);
  function numberAbbrev() {
    var letter;
    return function(num) {
    
    // give the number the correct designator, based on its original value and up 100th trillion
    // ie : 10,000 = 10K, 1,000,000 = 1M, 1,000,000,000 = 1B, 1,000,000,000,000 = 1T
    if (num >= Math.pow(10, 4) && num < Math.pow(10, 6)){
        letter = 'K';
     } else if (num >= Math.pow(10, 6) && num < Math.pow(10, 9)){
        letter = 'M';
     } else if (num >= Math.pow(10, 9) && num < Math.pow(10, 12)){
        letter = 'B';
     } else if (num >= Math.pow(10, 12) && num < Math.pow(10, 15)){
        letter = 'T';
     } else {
        letter = '';
        return num.toFixed(0);
     }

      // place the decimal point in the correct spot
      // so if the number is 
      // 1,253,502 = 1.3M
      // 12,542,423 = 12.5M
      // 124,634,242 = 125M
      var y = 0;
      var z = 0;
      var x = "";
      for (var i = 1; i < 16; i++) {
        while(num <= Math.pow(10, i)) {
          if (num === Math.pow(10, 4) || num === Math.pow(10, 6) || num === Math.pow(10, 9) || num === Math.pow(10, 12)) {
            y = num/Math.pow(10, i);
          }
          if (num > Math.pow(10, 6) && num <= Math.pow(10, 7) || num > Math.pow(10, 9) && num <= Math.pow(10, 10) || num > Math.pow(10, 12) && num <= Math.pow(10, 13)) {
            y = num/Math.pow(10, i - 1);
          }
          if (num > Math.pow(10, 4) && num <= Math.pow(10, 5) || num > Math.pow(10, 7) && num <= Math.pow(10, 8) || num > Math.pow(10, 10) && num <= Math.pow(10, 11) || num > Math.pow(10, 13) && num <= Math.pow(10, 14)) {
            y = num/Math.pow(10, i - 2);
          }
          if (num > Math.pow(10, 5) && num < Math.pow(10, 6) || num > Math.pow(10, 8) && num < Math.pow(10, 9) || num > Math.pow(10, 11) && num <  Math.pow(10, 12) || num > Math.pow(10, 14) && num <= Math.pow(10, 15)) {
            y = num/Math.pow(10, i - 3);
          }   

          // thousands rounding up to millions 

          if (num >= 99999 && num < Math.pow(10, 5)) {
            z = num/Math.pow(10, i - 2);
            letter = 'K';
            return z.toFixed(0) + letter;
          }
          if (num >= 999999 && num < Math.pow(10, 6)) {
            z = num/Math.pow(10, i );
            letter = 'M';
            return z.toFixed(0) + letter;
          } 
          
          // million rounding up to billions
          if (num >= 9999000 && num < Math.pow(10, 7)) {
            z = num/Math.pow(10, i - 1);
            letter = 'M';
            return z.toFixed(0) + letter;
          }
          if (num >= 99999000 && num < Math.pow(10, 8)) {
            z = num/Math.pow(10, i - 2);
            letter = 'M';
            return z.toFixed(0) + letter;
          }
          if (num >= 999999000 && num < Math.pow(10, 9)) {
            z = num/Math.pow(10, i);
            letter = 'B';
            return z.toFixed(0) + letter;
          } 

          // billions rounding up to trillions
          if (num >= 9999000000 && num < Math.pow(10, 10)) {
            z = num/Math.pow(10, i - 1);
            letter = 'B';
            return z.toFixed(0) + letter;
          }
          if (num >= 99999000000 && num < Math.pow(10, 11)) {
            z = num/Math.pow(10, i - 2);
            letter = 'B';
            return z.toFixed(0) + letter;
          }
          if (num >= 999999000000 && num < Math.pow(10, 12)) {
            z = num/Math.pow(10, i);
            letter = 'T';
            return z.toFixed(0) + letter;
          }

          // trillions rounding up to quadrillions
          if (num >= 9999999000000 && num < Math.pow(10, 13)) {
            z = num/Math.pow(10, i - 1);
            letter = 'T';
            return z.toFixed(0) + letter;
          }
          if (num >= 99999999000000 && num < Math.pow(10, 14)) {
            z = num/Math.pow(10, i - 2);
            letter = 'T';
            return z.toFixed(0) + letter;
          }
          if (num >= 999999999000000 && num < Math.pow(10, 15)) {
            z = num/Math.pow(10, i);
            letter = 'Q';
            return z.toFixed(0) + letter;
          }         
          
          x = y.toString();
          if (x.toString().charAt(1) === ".") {
            return Number(x).toFixed(2) + letter;
          } else if (x.toString().charAt(2) === ".") {
            return Number(x).toFixed(1) + letter;
          } else if (x.charAt(3) === "." && x > "1") {
            return Number(x).toFixed(0) + letter;
          } else {
            return Number(x).toFixed(0) + letter;
          }
        }
      } 
  };
}

//# sourceMappingURL=data:application/json;base64,